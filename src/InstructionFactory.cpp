#include "InstructionHelper.h"
#include "Instruction.h"
#include "Instructions.h"
using namespace std;

unique_ptr<Instruction> InstructionHelper::InstructionFactory::CreateInstruction(const uint8_t op_code){
    switch (op_code){
        case 0x00:
            return make_unique<AddRm8R8>("AddRm8R8");
        case 0x01:
            return make_unique<AddRm32R32>("AddRm32R32");
        case 0x02:
            return make_unique<AddR8Rm8>("AddR8Rm8");
        case 0x03:
            return make_unique<AddR32Rm32>("AddR32Rm32");
        case 0x04:
            return make_unique<AddAlImm8>("AddAlImm8");
        case 0x05:
            return make_unique<AddEaxImm32>("AddEaxImm32");
        case 0x06:
            return make_unique<PushEs>("PushEs");
        case 0x07:
            return make_unique<PopEs>("PopEs");
        case 0x08:
            return make_unique<OrRm8R8>("OrRm8R8");
        case 0x09:
            return make_unique<OrRm32R32>("OrRm32R32");
        case 0x0A:
            return make_unique<OrR8Rm8>("OrR8Rm8");
        case 0x0B:
            return make_unique<OrR32Rm32>("OrR32Rm32");
        case 0x0C:
            return make_unique<OrAlImm8>("OrAlImm8");
        case 0x0D:
            return make_unique<OrEaxImm32>("OrEaxImm32");
        case 0x0E:
            return make_unique<PushCs>("PushCs");
        case 0x0F:
            return make_unique<Code0F>("Code0F");
        case 0x10:
            return make_unique<AdcRm8R8>("AdcRm8R8");
        case 0x11:
            return make_unique<AdcRm32R32>("AdcRm32R32");
        case 0x13:
            return make_unique<AdcR32Rm32>("AdcR32Rm32");
        case 0x15:
            return make_unique<AdcEaxImm32>("AdcEaxImm32");
        case 0x16:
            return make_unique<PushSs>("PushSs");
        case 0x17:
            return make_unique<PopSs>("PopSs");
        case 0x18:
            return make_unique<SbbRm8R8>("SbbRm8R8");
        case 0x19:
            return make_unique<SbbRm32R32>("SbbRm32R32");
        case 0x1A:
            return make_unique<SbbR8Rm8>("SbbR8Rm8");
        case 0x1B:
            return make_unique<SbbR32Rm32>("SbbR32Rm32");
        case 0x1E:
            return make_unique<PushDs>("PushDs");
        case 0x1F:
            return make_unique<PopDs>("PopDs");
        case 0x20:
            return make_unique<AndRm8R8>("AndRm8R8");
        case 0x21:
            return make_unique<AndRm32R32>("AndRm32R32");
        case 0x22:
            return make_unique<AndR8Rm8>("AndR8Rm8");
        case 0x23:
            return make_unique<AndR32Rm32>("AndR32Rm32");
        case 0x24:
            return make_unique<AndAlImm8>("AndAlImm8");
        case 0x25:
            return make_unique<AndEaxImm32>("AndEaxImm32");
        case 0x28:
            return make_unique<SubRm8R8>("SubRm8R8");
        case 0x29:
            return make_unique<SubRm32R32>("SubRm32R32");
        case 0x2A:
            return make_unique<SubR8Rm8>("SubR8Rm8");
        case 0x2B:
            return make_unique<SubR32Rm32>("SubR32Rm32");
        case 0x2C:
            return make_unique<SubAlImm8>("SubAlImm8");
        case 0x2D:
            return make_unique<SubEaxImm32>("SubEaxImm32");
        case 0x30:
            return make_unique<XorRm8R8>("XorRm8R8");
        case 0x31:
            return make_unique<XorRm32R32>("XorRm32R32");
        case 0x32:
            return make_unique<XorR8Rm8>("XorR8Rm8");
        case 0x33:
            return make_unique<XorR32Rm32>("XorR32Rm32");
        case 0x35:
            return make_unique<XorEaxImm32>("XorEaxImm32");
        case 0x38:
            return make_unique<CmpRm8R8>("CmpRm8R8");
        case 0x39:
            return make_unique<CmpRm32R32>("CmpRm32R32");
        case 0x3A:
            return make_unique<CmpR8Rm8>("CmpR8Rm8");
        case 0x3B:
            return make_unique<CmpR32Rm32>("CmpR32Rm32");
        case 0x3C:
            return make_unique<CmpAlImm8>("CmpAlImm8");
        case 0x3D:
            return make_unique<CmpEaxImm32>("CmpEaxImm32");
        case 0x40+0:
        case 0x40+1:
        case 0x40+2:
        case 0x40+3:
        case 0x40+4:
        case 0x40+5:
        case 0x40+6:
        case 0x40+7:
            return make_unique<IncR32>("IncR32");
        case 0x48+0:
        case 0x48+1:
        case 0x48+2:
        case 0x48+3:
        case 0x48+4:
        case 0x48+5:
        case 0x48+6:
        case 0x48+7:
            return make_unique<DecR32>("DecR32");
        case 0x50+0:
        case 0x50+1:
        case 0x50+2:
        case 0x50+3:
        case 0x50+4:
        case 0x50+5:
        case 0x50+6:
        case 0x50+7:
            return make_unique<PushR32>("PushR32");
        case 0x58+0:
        case 0x58+1:
        case 0x58+2:
        case 0x58+3:
        case 0x58+4:
        case 0x58+5:
        case 0x58+6:
        case 0x58+7:
            return make_unique<PopR32>("PopR32");
        case 0x60:
            return make_unique<PushAd>("PushAd");
        case 0x61:
            return make_unique<PopAd>("PopAd");
        case 0x68:
            return make_unique<PushImm32>("PushImm32");
        case 0x69:
            return make_unique<ImulR32Rm32Imm32>("ImulR32Rm32Imm32");
        case 0x6A:
            return make_unique<PushImm8>("PushImm8");
        case 0x6B:
            return make_unique<ImulR32Rm32Imm8>("ImulR32Rm32Imm8");
        case 0x70:
            return make_unique<JoRel8>("JoRel8");
        case 0x71:
            return make_unique<JnoRel8>("JnoRel8");
        case 0x72:
            return make_unique<JcRel8>("JcRel8");
        case 0x73:
            return make_unique<JaeRel8>("JaeRel8");
        case 0x74:
            return make_unique<JzRel8>("JzRel8");
        case 0x75:
            return make_unique<JnzRel8>("JnzRel8");
        case 0x76:
            return make_unique<JbeRel8>("JbeRel8");
        case 0x77:
            return make_unique<JaRel8>("JaRel8");
        case 0x78:
            return make_unique<JsRel8>("JsRel8");
        case 0x79:
            return make_unique<JnsRel8>("JnsRel8");
        case 0x7A:
            return make_unique<JpRel8>("JpRel8");
        case 0x7B:
            return make_unique<JnpRel8>("JnpRel8");
        case 0x7C:
            return make_unique<JlRel8>("JlRel8");
        case 0x7D:
            return make_unique<JgeRel8>("JgeRel8");
        case 0x7E:
            return make_unique<JleRel8>("JleRel8");
        case 0x7F:
            return make_unique<JgRel8>("JgRel8");
        case 0x80:
            return make_unique<Code80>("Code80");
        case 0x81:
            return make_unique<Code81>("Code81");
        case 0x83:
            return make_unique<Code83>("Code83");
        case 0x84:
            return make_unique<TestRm8R8>("TestRm8R8");
        case 0x85:
            return make_unique<TestRm32R32>("TestRm32R32");
        case 0x86:
            return make_unique<XchgRm8R8>("XchgRm8R8");
        case 0x87:
            return make_unique<XchgR32Rm32>("XchgR32Rm32");
        case 0x88:
            return make_unique<MovRm8R8>("MovRm8R8");
        case 0x89:
            return make_unique<MovRm32R32>("MovRm32R32");
        case 0x8A:
            return make_unique<MovR8Rm8>("MovR8Rm8");
        case 0x8B:
            return make_unique<MovR32Rm32>("MovR32Rm32");
        case 0x8C:
            return make_unique<MovRm16Sreg>("MovRm16Sreg");
        case 0x8D:
            return make_unique<LeaR32M>("LeaR32M");
        case 0x8E:
            return make_unique<MovSregRm16>("MovSregRm16");
        case 0x8F:
            return make_unique<PopM32>("PopM32");
        case 0x90:
            return make_unique<Nop>("Nop");
        case 0x90+1://1から始める理由は0x90にはNopを割り当てているから。
        case 0x90+2:
        case 0x90+3:
        case 0x90+4:
        case 0x90+5:
        case 0x90+6:
        case 0x90+7:
            return make_unique<XchgEaxR32>("XchgEaxR32");
        case 0x98:
            return make_unique<Cwde>("Cwde");
        case 0x99:
            return make_unique<Cdq>("Cdq");
        case 0x9A:
            return make_unique<CallPtr1632>("CallPtr1632");
        case 0x9C:
            return make_unique<PushFd>("PushFd");
        case 0x9D:
            return make_unique<PopFd>("PopFd");
        case 0x9E:
            return make_unique<Sahf>("Sahf");
        case 0x9F:
            return make_unique<Lahf>("Lahf");
        case 0xA0:
            return make_unique<MovAlMoffs8>("MovAlMoffs8");
        case 0xA1:
            return make_unique<MovEaxMoffs32>("MovEaxMoffs32");
        case 0xA2:
            return make_unique<MovMoffs8Al>("MovMoffs8Al");
        case 0xA3:
            return make_unique<MovMoffs32Eax>("MovMoffs32Eax");
        case 0xA4:
            return make_unique<MovsM8M8>("MovsM8M8");
        case 0xA5:
            return make_unique<MovM32M32>("MovM32M32");
        case 0xA6:
            return make_unique<CmpsM8M8>("CmpsM8M8");
        case 0xA7:
            return make_unique<CmpsM32M32>("CmpsM32M32");
        case 0xA8:
            return make_unique<TestAlImm8>("TestAlImm8");
        case 0xA9:
            return make_unique<TestEaxImm32>("TestEaxImm32");
        case 0xAA:
            return make_unique<StosM8>("StosM8");
        case 0xAB:
            return make_unique<StosM32>("StosM32");
        case 0xAC:
            return make_unique<LodsM8>("LodsM8");
        case 0xAD:
            return make_unique<LodsM32>("LodsM32");
        case 0xAE:
            return make_unique<ScasM8>("ScasM8");
        case 0xAF:
            return make_unique<ScasD>("ScasD");
        case 0xB0+0:
        case 0xB0+1:
        case 0xB0+2:
        case 0xB0+3:
        case 0xB0+4:
        case 0xB0+5:
        case 0xB0+6:
        case 0xB0+7:
            return make_unique<MovR8Imm8>("MovR8Imm8");
        case 0xB8+0:
        case 0xB8+1:
        case 0xB8+2:
        case 0xB8+3:
        case 0xB8+4:
        case 0xB8+5:
        case 0xB8+6:
        case 0xB8+7:
            return make_unique<MovR32Imm32>("MovR32Imm32");
        case 0xC0:
            return make_unique<CodeC0>("CodeC0");
        case 0xC1:
            return make_unique<CodeC1>("CodeC1");
        case 0xC2:
            return make_unique<RetImm16>("RetImm16");
        case 0xC3:
            return make_unique<Ret32Near>("Ret32Near");
        case 0xC4:
            return make_unique<LesR32M1632>("LesR32M1632");
        case 0xC5:
            return make_unique<LdsR32M1632>("LdsR32M1632");
        case 0xC6:
            return make_unique<CodeC6>("CodeC6");
        case 0xC7:
            return make_unique<MovRm32Imm32>("MovRm32Imm32");
        case 0xC9:
            return make_unique<Leave>("Leave");
        case 0xCA:
            return make_unique<RetFarImm16>("RetFarImm16");
        case 0xCB:
            return make_unique<Ret32Far>("Ret32Far");
        case 0xCD:
            return make_unique<IntImm8>("IntImm8");
        case 0xCF:
            return make_unique<Iretd>("Iretd");
        case 0xD0:
            return make_unique<CodeD0>("CodeD0");
        case 0xD1:
            return make_unique<CodeD1>("CodeD1");
        case 0xD2:
            return make_unique<CodeD2>("CodeD2");
        case 0xD3:
            return make_unique<CodeD3>("CodeD3");
        case 0xD7:
            return make_unique<Xlatb>("Xlatb");
        case 0xE0:
            return make_unique<LoopneRel8>("LoopneRel8");
        case 0xE1:
            return make_unique<LoopeRel8>("LoopeRel8");
        case 0xE2:
            return make_unique<LoopRel8>("LoopRel8");
        case 0xE3:
            return make_unique<JcxzRel8>("JcxzRel8");
        case 0xE4:
            return make_unique<InAlImm8>("InAlImm8");
        case 0xE6:
            return make_unique<OutImm8>("OutImm8");
        case 0xE8:
            return make_unique<CallRel32>("CallRel32");
        case 0xE9:
            return make_unique<JmpRel32>("JmpRel32");
        case 0xEA:
            return make_unique<JmpPtr1632>("JmpPtr1632");
        case 0xEB:
            return make_unique<JmpRel8>("JmpRel8");
        case 0xEC:
            return make_unique<InAlDx>("InAlDx");
        case 0xEE:
            return make_unique<OutDxAl>("OutDxAl");
        case 0xF2:
            return make_unique<CodeF2>("CodeF2");
        case 0xF3:
            return make_unique<CodeF3>("CodeF3");
        case 0xF4:
            return make_unique<Hlt>("Hlt");
        case 0xF6:
            return make_unique<CodeF6>("CodeF6");
        case 0xF7:
            return make_unique<CodeF7>("CodeF7");
        case 0xF8:
            return make_unique<Clc>("Clc");
        case 0xF9:
            return make_unique<Stc>("Stc");
        case 0xFA:
            return make_unique<Cli>("Cli");
        case 0xFB:
            return make_unique<Sti>("Sti");
        case 0xFC:
            return make_unique<Cld>("Cld");
        case 0xFD:
            return make_unique<Std>("Std");
        case 0xFE:
            return make_unique<CodeFE>("CodeFE");
        case 0xFF:
            return make_unique<CodeFF>("CodeFF");
    }       
    unique_ptr<Instruction> p=NULL;
    return p;
}