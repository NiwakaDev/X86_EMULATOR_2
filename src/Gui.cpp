#include "Vga.h"
#include "Kbc.h"
#include "Gui.h"
#include "Font.h"
#include "Mouse.h"
using namespace std;

#define MOVE_SCALE 5
#define DISPLAY_SCALE 2

#define MAX_WIDTH 1280
#define MAX_HEIGHT 1024

uint8_t hankaku[4096] =  {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x38, 0x44, 0x82, 0xaa, 0xaa, 0x82, 0x82, 0xaa, 0x92, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x38, 0x7c, 0xfe, 0xd6, 0xd6, 0xfe, 0xfe, 0xd6, 0xee, 0x7c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x38, 0x54, 0xfe, 0x54, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0xd6, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 
	0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 
	0x38, 0x54, 0x92, 0x10, 0x10, 0x38, 0x44, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x82, 0x82, 0x82, 0x44, 0x38, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0x0e, 0x0b, 0x0b, 0x0a, 0x08, 0x08, 0x18, 0x78, 0xf8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0x1f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x77, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x54, 0x38, 0x28, 0x38, 0x54, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x0e, 0x1e, 0x3e, 0x7e, 0xfe, 0x7e, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x54, 0x92, 0x10, 0x10, 0x10, 0x92, 0x54, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x4a, 0x8a, 0x8a, 0x8a, 0x8a, 0x4a, 0x3a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x20, 0x38, 0x44, 0x82, 0x82, 0x82, 0x44, 0x38, 0x08, 0x04, 0x82, 0x7c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x54, 0x92, 0x10, 0x10, 0x10, 0x92, 0x54, 0x38, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x38, 0x54, 0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x92, 0x54, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x08, 0x04, 0xfe, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x20, 0x40, 0xfe, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x28, 0x44, 0xfe, 0x44, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x44, 0xfe, 0x44, 0x44, 0x44, 0x44, 0x44, 0xfe, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x56, 0x92, 0x92, 0x90, 0x50, 0x38, 0x14, 0x12, 0x92, 0x92, 0xd4, 0xb8, 0x10, 0x10, 0x10, 0x00, 
	0x94, 0x94, 0x68, 0x08, 0x10, 0x10, 0x20, 0x2c, 0x52, 0x52, 0x92, 0x8c, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x88, 0x88, 0x90, 0x60, 0x47, 0xa2, 0x92, 0x8a, 0x84, 0x46, 0x39, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 
	0x20, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x10, 0x92, 0x54, 0x38, 0x54, 0x92, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x08, 0x08, 0x10, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00, 
	0x24, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x28, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x42, 0x42, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x40, 0x40, 0x7e, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x42, 0x02, 0x02, 0x04, 0x18, 0x04, 0x02, 0x02, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0x0c, 0x14, 0x14, 0x14, 0x24, 0x24, 0x44, 0x7e, 0x04, 0x04, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x40, 0x40, 0x58, 0x64, 0x02, 0x02, 0x02, 0x02, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x42, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x26, 0x1a, 0x02, 0x42, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x08, 0x08, 0x10, 0x10, 0x00, 
	0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 
	0x44, 0x82, 0x82, 0x82, 0x04, 0x08, 0x10, 0x10, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x82, 0x9a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x9c, 0x80, 0x46, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x18, 0x18, 0x24, 0x24, 0x24, 0x24, 0x7e, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00, 0x00, 0x00, 
	0x48, 0x44, 0x44, 0x44, 0x48, 0x78, 0x44, 0x42, 0x42, 0x42, 0x44, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x46, 0x42, 0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x82, 0x42, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x40, 0x40, 0x42, 0x42, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x44, 0x40, 0x40, 0x40, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x46, 0x42, 0x82, 0x80, 0x80, 0x9e, 0x82, 0x82, 0x82, 0x42, 0x46, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x84, 0x48, 0x30, 0x00, 0x00, 0x00, 
	0x42, 0x44, 0x48, 0x50, 0x50, 0x60, 0x50, 0x50, 0x48, 0x44, 0x42, 0xe7, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x66, 0x66, 0x66, 0x5a, 0x5a, 0x5a, 0x42, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x62, 0x62, 0x52, 0x52, 0x52, 0x4a, 0x4a, 0x4a, 0x46, 0x46, 0xe2, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x42, 0x42, 0x42, 0x44, 0x78, 0x40, 0x40, 0x40, 0x40, 0x40, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x92, 0x8a, 0x44, 0x3a, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x42, 0x7c, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00, 0x00, 0x00, 
	0x46, 0x82, 0x82, 0x80, 0x40, 0x38, 0x04, 0x02, 0x82, 0x82, 0xc4, 0xb8, 0x00, 0x00, 0x00, 0x00, 
	0x92, 0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x24, 0x24, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x5a, 0x5a, 0x5a, 0x5a, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x24, 0x24, 0x24, 0x42, 0x42, 0xe7, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x84, 0x84, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x42, 0x82, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x00, 0x00, 0x00, 
	0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x00, 
	0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00, 
	0x28, 0x44, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x70, 0x08, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x8c, 0x76, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x64, 0x58, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x30, 0x4c, 0x84, 0x84, 0x80, 0x80, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x04, 0x04, 0x34, 0x4c, 0x84, 0x84, 0x84, 0x84, 0x84, 0x4c, 0x36, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0xfc, 0x80, 0x82, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x36, 0x4c, 0x84, 0x84, 0x84, 0x84, 0x4c, 0x34, 0x04, 0x04, 0x78, 0x18, 0x00, 
	0x40, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe3, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x30, 0x10, 0x00, 
	0x40, 0x40, 0x40, 0x4e, 0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0xe6, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf6, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0xdb, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xd8, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe3, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xd8, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x64, 0x58, 0x40, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x34, 0x4c, 0x84, 0x84, 0x84, 0x84, 0x84, 0x4c, 0x34, 0x04, 0x0e, 0x0e, 0x00, 
	0x00, 0x00, 0x00, 0xdc, 0x62, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7a, 0x86, 0x82, 0xc0, 0x38, 0x06, 0x82, 0xc2, 0xbc, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc6, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3b, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe7, 0x42, 0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe7, 0x42, 0x42, 0x5a, 0x5a, 0x5a, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc6, 0x44, 0x28, 0x28, 0x10, 0x28, 0x28, 0x44, 0xc6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe7, 0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x18, 0x10, 0x10, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfe, 0x82, 0x84, 0x08, 0x10, 0x20, 0x42, 0x82, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x10, 0x10, 0x10, 0x10, 0x60, 0x10, 0x10, 0x10, 0x10, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x08, 0x08, 0x08, 0x08, 0x06, 0x08, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x28, 0x44, 0x82, 0xfe, 0x82, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x82, 0x44, 0x38, 0x10, 0x20, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0xfe, 0x80, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x44, 0x00, 0x78, 0x04, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x44, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x78, 0x04, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x44, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x78, 0x04, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x44, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x18, 0x00, 0x78, 0x04, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x44, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3c, 0x42, 0x80, 0x80, 0x80, 0x80, 0x80, 0x42, 0x3c, 0x08, 0x10, 0x10, 0x00, 
	0x28, 0x44, 0x00, 0x38, 0x44, 0x82, 0x82, 0xfe, 0x80, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x38, 0x44, 0x82, 0x82, 0xfe, 0x80, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0xfe, 0x80, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x44, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00, 
	0x44, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0xfe, 0x80, 0x80, 0x80, 0x80, 0xf8, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x1c, 0x12, 0x72, 0x9e, 0x90, 0x90, 0x92, 0x6c, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x28, 0x28, 0x28, 0xfe, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x44, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x44, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x24, 0x00, 0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x20, 0x20, 0x40, 0x00, 0x00, 
	0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x3c, 0x6a, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x6a, 0x3c, 0x28, 0x28, 0x28, 0x08, 0x00, 
	0x12, 0x20, 0x20, 0x20, 0xfc, 0x20, 0x20, 0x20, 0x60, 0xa0, 0xb2, 0x4c, 0x00, 0x00, 0x00, 0x00, 
	0x82, 0x44, 0x28, 0x10, 0xfe, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x88, 0x88, 0x88, 0x94, 0xe4, 0x9f, 0x84, 0x84, 0x84, 0x84, 0x84, 0x00, 0x00, 0x00, 0x00, 
	0x12, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x78, 0x04, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x44, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x2a, 0x24, 0x00, 0xf8, 0x84, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00, 
	0x24, 0x00, 0x82, 0xc2, 0xc2, 0xa2, 0x92, 0x92, 0x8a, 0x86, 0x86, 0x82, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x78, 0x04, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x44, 0x3e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x10, 0x10, 0x20, 0x44, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x10, 0x10, 0x10, 0x00, 0xfe, 0x00, 0x78, 0x04, 0x38, 0x40, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x10, 0x10, 0x10, 0x00, 0xfe, 0x00, 0x18, 0x28, 0x48, 0x7c, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x12, 0x24, 0x48, 0x90, 0x90, 0x48, 0x24, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x90, 0x48, 0x24, 0x12, 0x12, 0x24, 0x48, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x04, 0x00, 
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x0a, 0x00, 
	0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x1d, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xf0, 0x10, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xf4, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x10, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xf4, 0x04, 0xf4, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x04, 0xf4, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xf4, 0x04, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xf0, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x17, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x17, 0x10, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x10, 0x17, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x17, 0x10, 0x17, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xf7, 0x00, 0xf7, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x10, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0xf7, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x10, 0xff, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 
	0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x10, 0x00, 
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void Gui::SetFont(){
    int x, y;
    char data;
    uint8_t* font = hankaku+'k'*16;
    x = 0;
    y = 0;
    Pixel pixel;
    pixel.r = 0xFF;
    pixel.g = 0xFF;
    pixel.b = 0xFF;

    for(int i=0; i < 16; i++){
        data = font[i];
		if((data & 0x80) != 0){
            this->image[x+0+(y+i)*this->screen_width] = pixel; 
		}
		if((data & 0x40) != 0){
            this->image[x+1+(y+i)*this->screen_width] = pixel;    
		}
		if((data & 0x20) != 0){
            this->image[x+2+(y+i)*this->screen_width] = pixel;      
		}
		if((data & 0x10) != 0){
            this->image[x+3+(y+i)*this->screen_width] = pixel;     
		}
		if((data & 0x08) != 0){
            this->image[x+4+(y+i)*this->screen_width] = pixel;     
		}
		if((data & 0x04) != 0){
            this->image[x+5+(y+i)*this->screen_width] = pixel;    
		}
		if((data & 0x02) != 0){
            this->image[x+6+(y+i)*this->screen_width] = pixel; 
		}
		if((data & 0x01) != 0){
            this->image[x+7+(y+i)*this->screen_width] = pixel;  
		}
    }
}

Gui::Gui(Vga* vga, Kbc* kbc, Mouse* mouse){
    this->vga = vga;
    assert(this->vga!=NULL);
    this->kbc = kbc;
    assert(this->kbc!=NULL);
    this->mouse = mouse;
    assert(this->mouse!=NULL);
    this->screen_height = DEFAULT_HEIGHT;
    this->screen_width  = DEFAULT_WIDTH;
    this->InitFontAscii();
    if( SDL_Init( SDL_INIT_VIDEO ) < 0 ){
        cerr << SDL_GetError() << endl;
        this->Error("at Gui::Gui");
    }
    this->window = SDL_CreateWindow("EMULATOR", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, this->screen_width*DISPLAY_SCALE, this->screen_height*DISPLAY_SCALE, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);
    if(this->window==NULL){
        cout << SDL_GetError() << endl;
        this->Error("at Gui::Gui");
    }
    this->renderer      = SDL_CreateRenderer(this->window, -1, SDL_RENDERER_ACCELERATED|SDL_RENDERER_PRESENTVSYNC);
    this->texture       = SDL_CreateTexture(this->renderer, SDL_PIXELFORMAT_BGRA8888, SDL_TEXTUREACCESS_STREAMING, this->screen_width, this->screen_height); 
    if(SDL_RenderSetLogicalSize(this->renderer, this->screen_width, this->screen_height)<0){
        cout << SDL_GetError() << endl;
        this->Error("at Gui::Gui");
    }
    this->image = (Pixel*)malloc(MAX_WIDTH*MAX_HEIGHT*sizeof(Pixel));//最大領域の場合のサイズで確保しておく。
    this->grab  = false;
}

Gui::~Gui(){
    //SDL_DestroyRenderer(this->renderer);
    SDL_DestroyWindow(this->window);
    SDL_Quit();
}

void Gui::InitFontAscii(){
    int i;

    for(i=0; i<16; i++){
        this->font_ascii['\n'][i] = 0x00;
    }
    for(i=0; i<16; i++){
        this->font_ascii['('][i] = font_RIGHT_PAR[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii[' '][i] = font_SPACE[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['+'][i] = font_PLUS[i];
    }
    for(i=0; i<16; i++){
        this->font_ascii[','][i] = font_COMMA[i];
    }
    for(i=0; i < 16; i++){
        font_ascii['='][i] = font_EQUAL[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['-'][i] = font_HYPHEN[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['.'][i] = font_DOT[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['0'][i] = font_0[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['1'][i] = font_1[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['2'][i] = font_2[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['3'][i] = font_3[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['4'][i] = font_4[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['5'][i] = font_5[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['6'][i] = font_6[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['7'][i] = font_7[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['8'][i] = font_8[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['9'][i] = font_9[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii[':'][i] = font_COLON[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['A'][i] = font_A[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['B'][i] = font_B[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['C'][i] = font_C[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['D'][i] = font_D[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['E'][i] = font_E[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['F'][i] = font_F[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['G'][i] = font_G[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['H'][i] = font_H[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['I'][i] = font_I[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['J'][i] = font_J[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['K'][i] = font_K[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['L'][i] = font_L[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['M'][i] = font_M[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['N'][i] = font_N[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['O'][i] = font_O[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['P'][i] = font_P[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['Q'][i] = font_Q[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['R'][i] = font_R[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['S'][i] = font_S[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['T'][i] = font_T[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['U'][i] = font_U[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['V'][i] = font_V[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['W'][i] = font_W[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['X'][i] = font_X[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['Y'][i] = font_Y[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['Z'][i] = font_Y[i];
    }
    for(i=0; i < 16; i++){
        this->font_ascii['a'][i] = font_Y[i];
    }
}

void Gui::Resize(){
    SDL_SetWindowSize(this->window, this->screen_width, this->screen_height);
    SDL_RenderSetLogicalSize(this->renderer,this->screen_width,this->screen_height);
    SDL_DestroyTexture(this->texture);
    this->texture = SDL_CreateTexture(this->renderer, SDL_PIXELFORMAT_BGRA8888, SDL_TEXTUREACCESS_STREAMING, this->screen_width, this->screen_height); 
}

void Gui::Update(){
    SDL_UpdateTexture(this->texture, NULL, this->image, this->screen_width * sizeof(Pixel));
    SDL_RenderCopy(this->renderer, this->texture, NULL, NULL);
    SDL_RenderPresent(this->renderer);
}

uint8_t Gui::SdlScancode2KeyCode(SDL_Event *e){
    uint8_t key_code;
    switch (e->key.keysym.sym){
        case SDLK_0:
            key_code = KEY_CODE_0;
            break;
        case SDLK_1:
            key_code = KEY_CODE_1;
            break;
        case SDLK_DOWN:
        case SDLK_2:
            key_code = KEY_CODE_2;
            break;
        case SDLK_3:
            key_code = KEY_CODE_3;
            break;
        case SDLK_LEFT:
        case SDLK_4:
            key_code = KEY_CODE_4;
            break;
        case SDLK_5:
            key_code = KEY_CODE_5;
            break;
        case SDLK_RIGHT:
        case SDLK_6:
            key_code = KEY_CODE_6;
            break;
        case SDLK_7:
            key_code = KEY_CODE_7;
            break;
        case SDLK_UP:
        case SDLK_8:
            key_code = KEY_CODE_8;
            break;
        case SDLK_9:
            key_code = KEY_CODE_9;
            break;
        case SDLK_a:
            key_code = KEY_CODE_A;
            break;
        case SDLK_b:
            key_code = KEY_CODE_B;
            break;
        case SDLK_c:
            key_code = KEY_CODE_C;
            break;
        case SDLK_d:
            key_code = KEY_CODE_D;
            break;
        case SDLK_e:
            key_code = KEY_CODE_E;
            break;
        case SDLK_f:
            key_code = KEY_CODE_F;
            break;
        case SDLK_s:
            key_code = KEY_CODE_S;
            break;
        case SDLK_g:
            key_code = KEY_CODE_G;
            if(this->grab&&this->GetModState()&&(!e->key.repeat)){//ctrlを押しているならば、画面外に出す。
                this->ShowCursor();
            }
            break;
        case SDLK_q:
            key_code = KEY_CODE_Q;
            break;
        case SDLK_h:
            key_code = KEY_CODE_H;
            break;
        case SDLK_j:
            key_code = KEY_CODE_J;
            break;
        case SDLK_k:
            key_code = KEY_CODE_K;
            break;
        case SDLK_l:
            key_code = KEY_CODE_L;
            break;
        case SDLK_m:
            key_code = KEY_CODE_M;
            break;
        case SDLK_n:
            key_code = KEY_CODE_N;
            break;
        case SDLK_o:
            key_code = KEY_CODE_O;
            break;
        case SDLK_p:
            key_code = KEY_CODE_P;
            break;
        case SDLK_r:
            key_code = KEY_CODE_R;
            break;
        case SDLK_t:
            key_code = KEY_CODE_T;
            break;
        case SDLK_w:
            key_code = KEY_CODE_W;
            break;
        case SDLK_x:
            key_code = KEY_CODE_X;
            break;
        case SDLK_z:
            key_code = KEY_CODE_Z;
            break;
        case SDLK_y:
            key_code = KEY_CODE_Y;
            break;
        case SDLK_u:
            key_code = KEY_CODE_U;
            break;
        case SDLK_i:
            key_code = KEY_CODE_I;
            break;
        case SDLK_v:
            key_code = KEY_CODE_V;
            break;
        case SDLK_SEMICOLON:
            key_code = KEY_CODE_SEMICOLON;
            break;
        case SDLK_COLON:
            key_code = KEY_CODE_COLON;
            break;
        case SDLK_SPACE:
            key_code = KEY_CODE_SPACE;
            break;
        case SDLK_RETURN:
            key_code = KEY_CODE_ENTER;
            break;
        case SDLK_PERIOD:
            key_code = KEY_CODE_PERIOD;
            break;
        case SDLK_COMMA:
            key_code = KEY_CODE_COMMA;
            break;
        case SDLK_LEFTBRACKET:
            key_code = KEY_CODE_LEFTBRACKET;
            break;
        case SDLK_RIGHTBRACKET:
            key_code = KEY_CODE_RIGHTBRACKET;
            break;
        case SDLK_BACKSPACE:
            key_code = KEY_CODE_BACKSPACE;
            break;
        case SDLK_LSHIFT:
            key_code = KEY_CODE_LSHIFT;
            break;
        case SDLK_RSHIFT:
            key_code = KEY_CODE_RSHIFT;
            break;
        case SDLK_TAB:
            key_code = KEY_CODE_TAB;
            break;
        case SDLK_LCTRL:
            key_code = KEY_CODE_LCTRL;
            break;
        case SDLK_MINUS:
            key_code = KEY_CODE_MINUS;
            break;
        case SDLK_F1:
            key_code = KEY_CODE_F1;
            break;
        case SDLK_F2:
            key_code = KEY_CODE_F2;
            break;
        case SDLK_F3:
            key_code = KEY_CODE_F3;
            break;
        case SDLK_F4:
            key_code = KEY_CODE_F4;
            break;
        case SDLK_F5:
            key_code = KEY_CODE_F5;
            break;
        case SDLK_F6:
            key_code = KEY_CODE_F6;
            break;
        case SDLK_F7:
            key_code = KEY_CODE_F7;
            break;
        case SDLK_F8:
            key_code = KEY_CODE_F8;
            break;
        case SDLK_F9:
            key_code = KEY_CODE_F9;
            break;
        case SDLK_F10:
            key_code = KEY_CODE_F10;
            break;
        case SDLK_F11:
            key_code = KEY_CODE_F11;
            break;
        case SDLK_F12:
            key_code = KEY_CODE_F12;
            break;
        case SDLK_LALT:
            key_code = KEY_CODE_LALT;
            break;
        case SDLK_CAPSLOCK:
            key_code = KEY_CODE_CAPSLOCK;
            break;
        default:
            this->Error("Not implemented: SDL_Keycode = %08X(http://sdl2referencejp.osdn.jp/SDLKeycodeLookup.html) at Gui::HandleKeyDown", e->key.keysym.sym);
    }
    return key_code;
}

void Gui::HandleKeyDown(SDL_Event *e){
    uint8_t key_code;
    switch (e->key.keysym.sym){//使うことのないキーコードはここでスルーする
        case SDLK_LGUI: 
            return;
        case SDLK_RGUI:
            return;
    }
    key_code = this->SdlScancode2KeyCode(e);
    this->kbc->Push(key_code);
}

void Gui::HandleKeyUp(SDL_Event *e){
    uint8_t key_code;
    switch (e->key.keysym.sym){//使うことのないキーコードはここでスルーする
        case SDLK_LGUI: 
            return;
        case SDLK_RGUI:
            return;
    }
    key_code = KEY_CODE_BREAK | this->SdlScancode2KeyCode(e);
    this->kbc->Push(key_code);
}

void Gui::HideCursor(){
    this->grab = true;
    SDL_ShowCursor(SDL_DISABLE);
    SDL_SetRelativeMouseMode(SDL_TRUE);//http://sdl2referencejp.osdn.jp/SDL_SetRelativeMouseMode.html
}

void Gui::ShowCursor(){
    this->grab = false;
    SDL_ShowCursor(SDL_ENABLE);
    SDL_SetRelativeMouseMode(SDL_FALSE);
}

int Gui::GetModState(){//左ctrl、左altの状態を得る。
    int mod_state = SDL_GetModState();
    int ctrl_alt_state = KMOD_LALT|KMOD_LCTRL;
    return (mod_state&ctrl_alt_state)==ctrl_alt_state;
}

void Gui::HandleMouseMotion(SDL_Event *e){

    uint8_t data0, data1, data2;
    int rel_x, rel_y;
   
    rel_x = e->motion.xrel / MOVE_SCALE;
    rel_y = e->motion.yrel / MOVE_SCALE;
    if(rel_x>127){
        rel_x = 127;
    }else if(rel_x < -127){
        rel_x = -127;
    }
    if(rel_y>127){
        rel_y = 127;
    }else if(rel_y < -127){
        rel_y = -127;
    }
    rel_y *= -1;
    data0 = DEFAULT_PACKET_BYTE0;
    if(e->motion.state==SDL_BUTTON_LMASK){
        data0 = data0 | LEFT_BUTTON;
    }
    if(rel_x < 0){
        data0 = data0 | X_SIGN_BIT;
    }
    if(rel_y < 0){
        data0 = data0 | Y_SIGN_BIT;
    }
    this->mouse->Send(data0);
    this->mouse->Send((uint8_t)rel_x);
    this->mouse->Send((uint8_t)rel_y);
}

void Gui::HandleMouseButton(SDL_Event *e){
    this->mouse->Send(DEFAULT_PACKET_BYTE0|LEFT_BUTTON);
    this->mouse->Send(0);
    this->mouse->Send(0);
}

//この関数はVgaクラスのvga_mutexをロックします。
void Gui::Display(){
    SDL_Event e;
    bool quit = false;
    unsigned int start;
    unsigned int end;
    //SDL_WarpMouseInWindow(this->window, guest_x, guest_y);
    while (!quit){
        start = SDL_GetTicks();
        while (SDL_PollEvent(&e)){
            if (e.type == SDL_QUIT){
                quit = true;
            }
            if(e.type==SDL_KEYDOWN){
                this->HandleKeyDown(&e);
                break;
            }
            if(e.type==SDL_KEYUP){
                this->HandleKeyUp(&e);
                break;
            }
            if(e.type==SDL_MOUSEMOTION){
                if(!this->mouse->IsEnable()){
                    break;
                }
                this->HandleMouseMotion(&e);
                break;
            }
            if(e.type==SDL_MOUSEBUTTONDOWN){
                if(!this->mouse->IsEnable()){
                    break;
                }
                if(!this->grab){//画面にマウスが取り込まれていない時。
                    this->HideCursor();
                }
                this->HandleMouseButton(&e);
            }
        }
        this->vga->LockVga();
        if((this->vga->GetHeight()!=this->screen_height)||(this->vga->GetWidth()!=this->screen_width)){
            this->screen_height = this->vga->GetHeight();
            this->screen_width  = this->vga->GetWidth();
            this->Resize();
        }
        for(int y=0; y<this->screen_height; y++){
            for(int x=0; x<this->screen_width; x++){
                this->image[x+y*this->screen_width] = *(this->vga->GetPixel(x, y));
            }
        }
        this->vga->UnlockVga();
        end = SDL_GetTicks();
        end = end - start;
        if(16>end){
            SDL_Delay(16-end);
        }   
        this->Update();
    }
}