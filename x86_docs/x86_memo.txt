x86の起動時の各レジスタの初期値

EFLAGS        = 0x00000002

EIP           = 0x0000FFF0

CR0           = 0x60000010
CR2           = 0x00000000
CR3           = 0x00000000
CR4           = 0x00000000

CS.selector   = 0xF000
CS.base       = 0xFFFF0000
CS.limit      = 0xFFFF

SS.selector   = 0x0000
SS.base       = 0x00000000
SS.limit      = 0xFFFF
DS.selector   = 0x0000
DS.base       = 0x00000000
DS.limit      = 0xFFFF
ES.selector   = 0x0000
ES.base       = 0x00000000
ES.limit      = 0xFFFF
FS.selector   = 0x0000
FS.base       = 0x00000000
FS.limit      = 0xFFFF
GS.selector   = 0x0000
GS.base       = 0x00000000
GS.limit      = 0xFFFF

EDX           = 0x00000Fxx

EAX           = 0x00000000
EBX           = 0x00000000
ECX           = 0x00000000
ESI           = 0x00000000
EDI           = 0x00000000
EBP           = 0x00000000
ESP           = 0x00000000

GDTR.base     = 0x00000000
GDTR.limit    = 0xFFFF

LDTR.selector = 0x0000
LDTR.base     = 0x00000000
LDTR.limit    = 0xFFFF

最初に実行される機械語命令の番地 : 0xFFFFFFF0
->アドレス幅20bitまでが有効なのでは?
->CS.baseの初期値を見れば分かる通り、CS.base+EIP = 0xFFFFFFF0となっている。
つまり、CSの見えない部分(CS.base)にはあらかじめ、20bit幅を超えるアドレス値が入っている。

けど、後述するBIOSがロードされる場所を考えると、別に
0x000ffff0番地にある機械語命令を実行するだけでも良さそう?

BIOSがロードされる場所
参考：https://github.com/nepx/halfix/blob/37a2d1394617397b817bbcd6fdb6260bbee26a10/src/pc.c#L340-L341
参照先によると、ミラー配置になっている。
1 : 0x000f0000~0x000fffff
2 : 0xffff0000~0xffffffff

1と2の両方に、BIOSが展開される。
最初に実行される機械語命令の番地は0xFFFFFFF0なので、ミラーされた領域の機械語命令が実行されることになる。
1と2の両方のメモリ範囲から分かる通り、BIOSのサイズは
0x000fffff-0x000f0000+1 = 0x00010000
※ 0x00010000=65536(10進数表記)

QEMUのシングルステップの実行に関わっていると思われる関数 : https://github.com/qemu/qemu/blob/master/cpu.c#L347-L358
QEMUにsinglestepで実行させるには、実行時にオプションとして-singlestepを渡してあげる。

レジスターの値を取得して、ファイルに保存する方法
-d cpu -D 保存先のファイル名
参考：https://msyksphinz.hatenablog.com/entry/2020/07/16/000000
※-dオプションに渡せるものは、qemu-system-i386 -d helpで確認可能

デバッグ付きでビルド
../configure --enable-debug

https://airbus-seclab.github.io/qemu_blog/

テストに使えそう
https://github.com/qemu/qemu/tree/266469947161aa10b1d36843580d369d5aa38589/tests/tcg/i386

https://github.com/barotto/test386.asm
diagnostic codeによって、今現在どのテストコードが実行されているかどうか分かる。
例えば、diagnostic code=0x00でエミュレータがHLTされるならば、Real mode initialisationのテストコードに
失敗していることが分かる。diagnostic codeはポート番号0x190を通じて、取得できる。
diagnostic codeに対応したソースコードが知りたい場合は、
https://github.com/barotto/test386.asm/blob/1ccc5adb729b6d729118c821b0777ad44fb42766/src/test386.asmで
わかる。

例外について
MOV命令でCSをロードすることはできない。
この場合、無効オペコード(#UD)が発生する。
ベクター番号：0x06
これはリアルモードだろうがプロテクトモードだろうが同じ


ページングについて
CR2はページフォルトを発生させたリニアアドレスが格納されている。
ページフォルトについて



スタックのアドレス属性とオペランド属性について
現行のコードセグメントのDフラグ  : オペランド属性とソースオペランドのアドレス属性
現行のスタックセグメントのDフラグ : スタックのアドレス属性

スタックのアドレス属性は67フラグとは無関係

保護モード例外
#GP(0) : 例外GPで、エラーコード0を伴う
エラーコードはスタック上に保存される

特権レベル
CPL, DPL, RPL

CPL : セグメントレジスタのかい

実効アドレスとはオフセットのこと。
オフセットはアドレッシングモードで決定される。
オフセット=ベース+インデックス*スケール+ディスプレーすメント

基本的にはDSセグメントがデフォルトセグメントになるが、ベースがESPもしくはEBPの場合はSSがデフォルトセグメントになる。
